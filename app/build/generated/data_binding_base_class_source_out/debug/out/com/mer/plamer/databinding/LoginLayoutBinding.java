// Generated by view binder compiler. Do not edit!
package com.mer.plamer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mer.plamer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LoginLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imageLogin;

  @NonNull
  public final ImageButton loginBack;

  @NonNull
  public final ImageButton loginGo;

  @NonNull
  public final EditText loginPassword;

  @NonNull
  public final EditText loginUsername;

  private LoginLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imageLogin,
      @NonNull ImageButton loginBack, @NonNull ImageButton loginGo, @NonNull EditText loginPassword,
      @NonNull EditText loginUsername) {
    this.rootView = rootView;
    this.imageLogin = imageLogin;
    this.loginBack = loginBack;
    this.loginGo = loginGo;
    this.loginPassword = loginPassword;
    this.loginUsername = loginUsername;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LoginLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LoginLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.login_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LoginLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.image_login;
      ImageView imageLogin = ViewBindings.findChildViewById(rootView, id);
      if (imageLogin == null) {
        break missingId;
      }

      id = R.id.login_back;
      ImageButton loginBack = ViewBindings.findChildViewById(rootView, id);
      if (loginBack == null) {
        break missingId;
      }

      id = R.id.login_go;
      ImageButton loginGo = ViewBindings.findChildViewById(rootView, id);
      if (loginGo == null) {
        break missingId;
      }

      id = R.id.login_password;
      EditText loginPassword = ViewBindings.findChildViewById(rootView, id);
      if (loginPassword == null) {
        break missingId;
      }

      id = R.id.login_username;
      EditText loginUsername = ViewBindings.findChildViewById(rootView, id);
      if (loginUsername == null) {
        break missingId;
      }

      return new LoginLayoutBinding((ConstraintLayout) rootView, imageLogin, loginBack, loginGo,
          loginPassword, loginUsername);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
