// Generated by view binder compiler. Do not edit!
package com.mer.plamer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mer.plamer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SignupLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imageSignup;

  @NonNull
  public final ImageButton signupBack;

  @NonNull
  public final ImageButton signupGo;

  @NonNull
  public final EditText signupPassword;

  @NonNull
  public final EditText signupUsername;

  private SignupLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imageSignup,
      @NonNull ImageButton signupBack, @NonNull ImageButton signupGo,
      @NonNull EditText signupPassword, @NonNull EditText signupUsername) {
    this.rootView = rootView;
    this.imageSignup = imageSignup;
    this.signupBack = signupBack;
    this.signupGo = signupGo;
    this.signupPassword = signupPassword;
    this.signupUsername = signupUsername;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SignupLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SignupLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.signup_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SignupLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.image_signup;
      ImageView imageSignup = ViewBindings.findChildViewById(rootView, id);
      if (imageSignup == null) {
        break missingId;
      }

      id = R.id.signup_back;
      ImageButton signupBack = ViewBindings.findChildViewById(rootView, id);
      if (signupBack == null) {
        break missingId;
      }

      id = R.id.signup_go;
      ImageButton signupGo = ViewBindings.findChildViewById(rootView, id);
      if (signupGo == null) {
        break missingId;
      }

      id = R.id.signup_password;
      EditText signupPassword = ViewBindings.findChildViewById(rootView, id);
      if (signupPassword == null) {
        break missingId;
      }

      id = R.id.signup_username;
      EditText signupUsername = ViewBindings.findChildViewById(rootView, id);
      if (signupUsername == null) {
        break missingId;
      }

      return new SignupLayoutBinding((ConstraintLayout) rootView, imageSignup, signupBack, signupGo,
          signupPassword, signupUsername);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
