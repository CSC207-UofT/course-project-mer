// Generated by view binder compiler. Do not edit!
package com.mer.plamer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mer.plamer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SearchLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton searchBackLastPage;

  @NonNull
  public final RelativeLayout searchBottomBar;

  @NonNull
  public final ImageButton searchConfirm;

  @NonNull
  public final EditText searchInput;

  @NonNull
  public final ListView searchList;

  @NonNull
  public final ImageButton searchNext;

  @NonNull
  public final ImageButton searchPlay;

  @NonNull
  public final ImageButton searchPlaying;

  @NonNull
  public final ImageButton searchPrev;

  @NonNull
  public final ImageButton searchRepeatList;

  @NonNull
  public final RelativeLayout searchTopBar;

  @NonNull
  public final Spinner searchType;

  private SearchLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageButton searchBackLastPage, @NonNull RelativeLayout searchBottomBar,
      @NonNull ImageButton searchConfirm, @NonNull EditText searchInput,
      @NonNull ListView searchList, @NonNull ImageButton searchNext,
      @NonNull ImageButton searchPlay, @NonNull ImageButton searchPlaying,
      @NonNull ImageButton searchPrev, @NonNull ImageButton searchRepeatList,
      @NonNull RelativeLayout searchTopBar, @NonNull Spinner searchType) {
    this.rootView = rootView;
    this.searchBackLastPage = searchBackLastPage;
    this.searchBottomBar = searchBottomBar;
    this.searchConfirm = searchConfirm;
    this.searchInput = searchInput;
    this.searchList = searchList;
    this.searchNext = searchNext;
    this.searchPlay = searchPlay;
    this.searchPlaying = searchPlaying;
    this.searchPrev = searchPrev;
    this.searchRepeatList = searchRepeatList;
    this.searchTopBar = searchTopBar;
    this.searchType = searchType;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SearchLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SearchLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.search_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SearchLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.search_back_last_page;
      ImageButton searchBackLastPage = ViewBindings.findChildViewById(rootView, id);
      if (searchBackLastPage == null) {
        break missingId;
      }

      id = R.id.search_bottom_bar;
      RelativeLayout searchBottomBar = ViewBindings.findChildViewById(rootView, id);
      if (searchBottomBar == null) {
        break missingId;
      }

      id = R.id.search_confirm;
      ImageButton searchConfirm = ViewBindings.findChildViewById(rootView, id);
      if (searchConfirm == null) {
        break missingId;
      }

      id = R.id.search_input;
      EditText searchInput = ViewBindings.findChildViewById(rootView, id);
      if (searchInput == null) {
        break missingId;
      }

      id = R.id.search_list;
      ListView searchList = ViewBindings.findChildViewById(rootView, id);
      if (searchList == null) {
        break missingId;
      }

      id = R.id.search_next;
      ImageButton searchNext = ViewBindings.findChildViewById(rootView, id);
      if (searchNext == null) {
        break missingId;
      }

      id = R.id.search_play;
      ImageButton searchPlay = ViewBindings.findChildViewById(rootView, id);
      if (searchPlay == null) {
        break missingId;
      }

      id = R.id.search_playing;
      ImageButton searchPlaying = ViewBindings.findChildViewById(rootView, id);
      if (searchPlaying == null) {
        break missingId;
      }

      id = R.id.search_prev;
      ImageButton searchPrev = ViewBindings.findChildViewById(rootView, id);
      if (searchPrev == null) {
        break missingId;
      }

      id = R.id.search_repeat_list;
      ImageButton searchRepeatList = ViewBindings.findChildViewById(rootView, id);
      if (searchRepeatList == null) {
        break missingId;
      }

      id = R.id.search_top_bar;
      RelativeLayout searchTopBar = ViewBindings.findChildViewById(rootView, id);
      if (searchTopBar == null) {
        break missingId;
      }

      id = R.id.search_type;
      Spinner searchType = ViewBindings.findChildViewById(rootView, id);
      if (searchType == null) {
        break missingId;
      }

      return new SearchLayoutBinding((ConstraintLayout) rootView, searchBackLastPage,
          searchBottomBar, searchConfirm, searchInput, searchList, searchNext, searchPlay,
          searchPlaying, searchPrev, searchRepeatList, searchTopBar, searchType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
